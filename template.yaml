apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: aws-workload-snowflake-sql-template-skeleton
  title: Snowflake SQL Workload (Skeleton)
  description: Defines the SQL file that will transform the data inside a
    Snowflake environment handled by MWAA
  mesh:
    icon: https://images.peerspot.com/image/upload/c_scale,f_auto,q_auto,w_200/n6s4iaqxu28b48836wzu0qr31g18.png
  tags:
    - aws
    - sql
    - snowflake
    - workload
spec:
  generates: componenttype:default/workload
  owner: agilelab
  type: workload
  parameters:
    - title: Component basic information
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required name used for display purposes
          ui:field: EntityNamePicker
          default: Snowflake SQL Workload
          ui:options:
            allowArbitraryValues: true
        description:
          title: Description
          type: string
          description: Help others understand what this Workload is for
        domain:
          title: Domain
          type: string
          description: Domain of the Data Product this Workload belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Data Product this Workload belongs to
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: A unique identifier for the entity inside the domain. It will not
            be editable aftrer creation and is expected to be a string that is
            sequences of [a-zA-Z] separated by any of [-_]. An example could be
            'finance-customer'
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: DevelopmentGroup
          type: string
          description: Data Product development group
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Depends on
          type: array
          default: []
          items:
            type: string
            ui:field: EntityComponentsPicker
            ui:fieldName: dataproduct
            ui:options:
              allowArbitraryValues: false
          description: A Workload could depend on other components
        readsFrom:
          title: Reads from
          type: array
          default: []
          items:
            type: string
            ui:field: ReadsFromPicker
          description: This is filled only for DataPipeline workloads and it represents
            the list of output ports or external systems that is reading

        domainName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: domain
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
        dataproductName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden

    - title: SQL file details
      required:
        - sqlName
      properties:
        sqlName:
          title: Snowflake SQL file name
          type: string
          description: Name of the .sql file located in the artifacts/ folder of the
            component
          default: snowflake.sql
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: .
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          domain: ${{ parameters.domain }}
          dataproduct: ${{ parameters.dataproduct }}
          domainName: ${{ parameters.domainName }}
          dataproductName: ${{ parameters.dataproductName }}
          identifier: ${{ parameters.identifier }}
          developmentGroup: ${{ parameters.developmentGroup }}
          dependsOn: ${{ parameters.dependsOn }}
          readsFrom: ${{ parameters.readsFrom }}
          sqlName: ${{ parameters.sqlName }}
          useCaseTemplateId: urn:dmb:utm:aws-workload-snowflake-sql-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:aws-workload-snowflake-sql-provisioner:0
          useCaseTemplateVersion: 0.0.0
          repoUrl: gitlab.com?owner=AgileDMBSandbox%2F${{orgname}}%2Fmesh.repository%2F${{
            parameters.domain | replace(r/domain:| |-/, "") }}%2F${{
            parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "")
            }}&repo=${{ parameters.name.split(" ") | join("") | lower }}
          rootDirectory: .
          displayName: ${{ parameters.displayName }}
    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts:
          - gitlab.com
        description: This is ${{ parameters.name }}
        repoUrl: gitlab.com?owner=simone.pusceddu&repo=${{ parameters.name.split(" ") | join("") | lower }}
        rootDirectory: .
        dataproduct: ${{ parameters.dataproduct }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
